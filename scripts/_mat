#compdef mat

# fails if defined as local
ignore="-h --help"

_mat-compare() {
	local -a args
	args+=(
		"1: :"
		"($ignore -f --full)"{-f,--full}'[output full distance matrix]'
		'(- *)--help[print help]'
	)
	_arguments -w -s -S $args[@] '*:file:_files'
}

_mat-format() {
	local -a args
	args+=(
		"1: :"
		"($ignore -f --fix)"{-f,--fix}'[fix small errors]'
		"($ignore)--format=[the format string]:str:"
		"($ignore)--precision=[precision to use in comparisons]:float:"
		"($ignore)--separator=[the cell separator]:char:"
		"($ignore -s --sort)"{-s,--sort}"[sort by name]"
		"($ignore)--truncate-names[truncate names to ten characters]"
		"($ignore -v --validate -f --fix)"{-v,--validate}'[validate for correctness]'
		'(- *)'{-h,--help}'[print help]'
	)
	_arguments -w -s -S $args[@] '*:file:_files'
}

_mat-grep() {
	local -a args
	# The second argument is the pattern, do not autocomplete. But *do* try
	# to complete, if it could be an argument.
	args+=(
		"1: :"
		'2: :_guard "^-" pattern'
		"($ignore -v --invert-match)"{-v,--invert-match}'[select non-matching names]'
		'(- *)'{-h,--help}'[print help]'
	)
	_arguments -w -s -S $args[@] '*:file:_files'
}

_mat-nj() {
	local -a args
	args+=(
		"1: :"
		'(- *)'{-h,--help}'[print help]'
		"($ignore)--no-support[do not compute support values]"
	)
	_arguments -w -s -S $args[@] '*:file:_files'
}

_mat() {
	local ret=1
	local -a args
	if ((CURRENT == 2)); then
		# complete args and commands
		args+=(
			'(- *)--version[print version information]'
			'(- *)--help[print help]'
		)

		_arguments -w -s -S $args[@]
		_describe 'mat command' '(
			compare:compute\ the\ distance\ between\ two\ matrices
			format:format\ distance\ matrix
			grep:print\ submatrix\ for\ names\ matching\ a\ pattern
			nj:convert\ to\ a\ tree\ by\ neighbor\ joining
		)'
		ret=0
	else
		# delegate to sub commands
		local subcmd=_mat-$words[2]
		if ! _call_function ret $subcmd ; then
			_message "unknown sub-command: $words[1]"
		fi
	fi
	return ret
}

_mat
